import mongoose from 'mongoose';
import ProfessorModel from './models/ProfessorModel.js';
import UserModel from './models/userModel.js';
import SubjectModel from './models/Subject.js';
import Assignment from './models/Assignment.js';

const seedAssignments = async () => {
    try {
        // Connexion √† la base de donn√©es
        await mongoose.connect('mongodb://localhost:27017/pfe_management_db', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log("‚úÖ Connexion √† la base de donn√©es r√©ussie.");

        // Recherche du professeur
        const professor = await ProfessorModel.findOne({ email: "eyoueya86@gmail.com" });
        if (!professor) {
            console.log("‚ùå Professeur introuvable.");
            return;
        }

        // Recherche des √©tudiants
        const students = await UserModel.find({});
        if (students.length === 0) {
            console.log("‚ùå Aucun √©tudiant trouv√©.");
            return;
        }

        let assignmentsCreated = 0; // Compteur d'assignments cr√©√©s

        for (let student of students) {
            // R√©cup√©rer les sujets propos√©s par l'√©tudiant
            const subjects = await SubjectModel.find({ proposedBy: student._id });

            if (subjects.length === 0) {
                console.log(`‚ö†Ô∏è L'√©tudiant ${student.name} n'a propos√© aucun sujet.`);
                continue;
            }

            for (let subject of subjects) {
                // Assigner le professeur comme superviseur
                subject.supervisor = professor._id;
                await subject.save();

                // V√©rification avant de cr√©er un assignment
                const existingAssignment = await Assignment.findOne({
                    student: student._id,
                    subject: subject._id,
                    professor: professor._id
                });

                if (!existingAssignment) {
                    const assignment = new Assignment({
                        student: student._id,
                        subject: subject._id,
                        professor: professor._id,
                        status: 'assigned',
                    });

                    await assignment.save();
                    assignmentsCreated++;
                }
            }
        }

        console.log(`‚úÖ ${assignmentsCreated} assignments ins√©r√©s avec succ√®s.`);
    } catch (error) {
        console.error("‚ùå Erreur lors de l'insertion des assignments:", error);
    } finally {
        mongoose.connection.close(); // Fermer la connexion apr√®s ex√©cution
        console.log("üîå Connexion MongoDB ferm√©e.");
    }
};

seedAssignments();
