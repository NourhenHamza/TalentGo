import { eventManager } from '../events/index.js';

/**
 * Utilitaires pour faciliter l'utilisation du syst√®me d'√©v√©nements
 */

/**
 * D√©corateur pour les m√©thodes de contr√¥leur qui doivent √©mettre des √©v√©nements
 * @param {string} eventType - Type d'√©v√©nement √† √©mettre
 * @param {Function} dataExtractor - Fonction pour extraire les donn√©es de l'√©v√©nement
 */
export function emitEvent(eventType, dataExtractor = (result, req) => result) {
  return function(target, propertyName, descriptor) {
    const method = descriptor.value;

    descriptor.value = async function(...args) {
      try {
        const result = await method.apply(this, args);
        
        // Extraire les donn√©es de l'√©v√©nement
        const req = args.find(arg => arg && arg.method && arg.path); // Trouver l'objet request
        const eventData = dataExtractor(result, req);
        
        // √âmettre l'√©v√©nement
        eventManager.emitSafe(eventType, eventData);
        
        return result;
      } catch (error) {
        console.error(`‚ùå Erreur dans la m√©thode ${propertyName}:`, error);
        throw error;
      }
    };

    return descriptor;
  };
}

/**
 * Classe pour g√©rer les √©v√©nements de mani√®re fluide
 */
export class EventBuilder {
  constructor() {
    this.eventType = null;
    this.eventData = {};
    this.context = {};
    this.delay = 0;
    this.condition = () => true;
  }

  /**
   * D√©finit le type d'√©v√©nement
   * @param {string} type - Type d'√©v√©nement
   */
  type(type) {
    this.eventType = type;
    return this;
  }

  /**
   * D√©finit les donn√©es de l'√©v√©nement
   * @param {Object} data - Donn√©es de l'√©v√©nement
   */
  data(data) {
    this.eventData = { ...this.eventData, ...data };
    return this;
  }

  /**
   * Ajoute du contexte √† l'√©v√©nement
   * @param {Object} context - Contexte suppl√©mentaire
   */
  withContext(context) {
    this.context = { ...this.context, ...context };
    return this;
  }

  /**
   * D√©finit un d√©lai avant l'√©mission de l'√©v√©nement
   * @param {number} ms - D√©lai en millisecondes
   */
  withDelay(ms) {
    this.delay = ms;
    return this;
  }

  /**
   * D√©finit une condition pour l'√©mission de l'√©v√©nement
   * @param {Function} conditionFn - Fonction de condition
   */
  when(conditionFn) {
    this.condition = conditionFn;
    return this;
  }

  /**
   * √âmet l'√©v√©nement
   */
  emit() {
    if (!this.eventType) {
      throw new Error('Type d\'√©v√©nement non d√©fini');
    }

    if (!this.condition()) {
      console.log(`‚è≠Ô∏è Condition non remplie pour l'√©v√©nement: ${this.eventType}`);
      return;
    }

    const finalData = {
      ...this.eventData,
      context: this.context,
      timestamp: new Date()
    };

    if (this.delay > 0) {
      setTimeout(() => {
        eventManager.emitSafe(this.eventType, finalData);
      }, this.delay);
    } else {
      eventManager.emitSafe(this.eventType, finalData);
    }
  }

  /**
   * √âmet l'√©v√©nement de mani√®re asynchrone
   */
  async emitAsync() {
    return new Promise((resolve) => {
      if (this.delay > 0) {
        setTimeout(() => {
          this.emit();
          resolve();
        }, this.delay);
      } else {
        this.emit();
        resolve();
      }
    });
  }
}

/**
 * Factory pour cr√©er un EventBuilder
 */
export const createEvent = () => new EventBuilder();

/**
 * Utilitaires pour les √©v√©nements sp√©cifiques aux mod√®les
 */
export class ModelEventHelper {
  constructor(modelName) {
    this.modelName = modelName.toLowerCase();
  }

  /**
   * √âmet un √©v√©nement de cr√©ation
   * @param {Object} data - Donn√©es du mod√®le cr√©√©
   * @param {Object} context - Contexte suppl√©mentaire
   */
  created(data, context = {}) {
    return createEvent()
      .type(`${this.modelName}:created`)
      .data(data)
      .withContext(context)
      .emit();
  }

  /**
   * √âmet un √©v√©nement de mise √† jour
   * @param {Object} data - Donn√©es du mod√®le mis √† jour
   * @param {Object} changes - Changements effectu√©s
   * @param {Object} context - Contexte suppl√©mentaire
   */
  updated(data, changes = {}, context = {}) {
    return createEvent()
      .type(`${this.modelName}:updated`)
      .data({ ...data, changes })
      .withContext(context)
      .emit();
  }

  /**
   * √âmet un √©v√©nement de suppression
   * @param {Object} data - Donn√©es du mod√®le supprim√©
   * @param {Object} context - Contexte suppl√©mentaire
   */
  deleted(data, context = {}) {
    return createEvent()
      .type(`${this.modelName}:deleted`)
      .data(data)
      .withContext(context)
      .emit();
  }

  /**
   * √âmet un √©v√©nement de changement de statut
   * @param {Object} data - Donn√©es du mod√®le
   * @param {string} oldStatus - Ancien statut
   * @param {string} newStatus - Nouveau statut
   * @param {Object} context - Contexte suppl√©mentaire
   */
  statusChanged(data, oldStatus, newStatus, context = {}) {
    return createEvent()
      .type(`${this.modelName}:status_changed`)
      .data({ ...data, oldStatus, newStatus })
      .withContext(context)
      .emit();
  }
}

/**
 * Helpers sp√©cifiques pour chaque mod√®le
 */
export const AssignmentEvents = new ModelEventHelper('assignment');
export const DefenseEvents = new ModelEventHelper('defense');
export const CompanyEvents = new ModelEventHelper('company');
export const UniversityEvents = new ModelEventHelper('university');
export const ReportEvents = new ModelEventHelper('report');
export const ProgressEvents = new ModelEventHelper('progress');
export const AvailabilityEvents = new ModelEventHelper('availability');
export const EncadreurEvents = new ModelEventHelper('encadreur');
export const UserEvents = new ModelEventHelper('user');
export const SubjectEvents = new ModelEventHelper('subject');
export const EventsEvents = new ModelEventHelper('events');

/**
 * Utilitaire pour cr√©er des √©v√©nements conditionnels
 */
export class ConditionalEventEmitter {
  constructor() {
    this.events = [];
  }

  /**
   * Ajoute un √©v√©nement conditionnel
   * @param {string} eventType - Type d'√©v√©nement
   * @param {Function} condition - Condition pour √©mettre l'√©v√©nement
   * @param {Function} dataProvider - Fonction qui fournit les donn√©es
   */
  addConditionalEvent(eventType, condition, dataProvider) {
    this.events.push({ eventType, condition, dataProvider });
    return this;
  }

  /**
   * √âvalue et √©met tous les √©v√©nements conditionnels
   * @param {Object} context - Contexte pour l'√©valuation
   */
  evaluate(context) {
    this.events.forEach(({ eventType, condition, dataProvider }) => {
      try {
        if (condition(context)) {
          const data = dataProvider(context);
          eventManager.emitSafe(eventType, data);
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors de l'√©valuation de l'√©v√©nement conditionnel ${eventType}:`, error);
      }
    });
  }

  /**
   * Vide la liste des √©v√©nements conditionnels
   */
  clear() {
    this.events = [];
    return this;
  }
}

/**
 * Utilitaire pour grouper plusieurs √©v√©nements
 */
export class EventBatch {
  constructor() {
    this.events = [];
  }

  /**
   * Ajoute un √©v√©nement au batch
   * @param {string} eventType - Type d'√©v√©nement
   * @param {Object} data - Donn√©es de l'√©v√©nement
   */
  add(eventType, data) {
    this.events.push({ eventType, data, timestamp: new Date() });
    return this;
  }

  /**
   * √âmet tous les √©v√©nements du batch
   * @param {number} delay - D√©lai entre chaque √©v√©nement (optionnel)
   */
  async emit(delay = 0) {
    for (let i = 0; i < this.events.length; i++) {
      const { eventType, data } = this.events[i];
      
      eventManager.emitSafe(eventType, data);
      
      if (delay > 0 && i < this.events.length - 1) {
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }

  /**
   * √âmet tous les √©v√©nements en parall√®le
   */
  emitParallel() {
    this.events.forEach(({ eventType, data }) => {
      eventManager.emitSafe(eventType, data);
    });
  }

  /**
   * Vide le batch
   */
  clear() {
    this.events = [];
    return this;
  }

  /**
   * Retourne le nombre d'√©v√©nements dans le batch
   */
  size() {
    return this.events.length;
  }
}

/**
 * Utilitaire pour d√©boguer les √©v√©nements
 */
export class EventDebugger {
  constructor() {
    this.logs = [];
    this.isEnabled = process.env.NODE_ENV === 'development';
  }

  /**
   * Active ou d√©sactive le d√©bogage
   * @param {boolean} enabled - √âtat du d√©bogage
   */
  setEnabled(enabled) {
    this.isEnabled = enabled;
  }

  /**
   * Enregistre un √©v√©nement pour le d√©bogage
   * @param {string} eventType - Type d'√©v√©nement
   * @param {Object} data - Donn√©es de l'√©v√©nement
   */
  logEvent(eventType, data) {
    if (!this.isEnabled) return;

    const logEntry = {
      timestamp: new Date(),
      eventType,
      data: JSON.stringify(data, null, 2),
      stackTrace: new Error().stack
    };

    this.logs.push(logEntry);
    
    // Garder seulement les 100 derniers logs
    if (this.logs.length > 100) {
      this.logs.shift();
    }

    console.log(`üêõ [EventDebugger] ${eventType}:`, data);
  }

  /**
   * Retourne tous les logs
   */
  getLogs() {
    return this.logs;
  }

  /**
   * Filtre les logs par type d'√©v√©nement
   * @param {string} eventType - Type d'√©v√©nement √† filtrer
   */
  getLogsByType(eventType) {
    return this.logs.filter(log => log.eventType === eventType);
  }

  /**
   * Vide les logs
   */
  clearLogs() {
    this.logs = [];
  }
}

// Instance globale du debugger
export const eventDebugger = new EventDebugger();

// Ajouter le debugger aux √©v√©nements si activ√©
if (eventDebugger.isEnabled) {
  eventManager.on('*', (eventType, data) => {
    eventDebugger.logEvent(eventType, data);
  });
}

/**
 * Fonction utilitaire pour cr√©er des √©v√©nements personnalis√©s facilement
 */
export const quickEvent = (type, data = {}, context = {}) => {
  return createEvent()
    .type(type)
    .data(data)
    .withContext(context)
    .emit();
};

/**
 * Fonction utilitaire pour cr√©er des √©v√©nements avec d√©lai
 */
export const delayedEvent = (type, data = {}, delay = 1000) => {
  return createEvent()
    .type(type)
    .data(data)
    .withDelay(delay)
    .emit();
};

export default {
  createEvent,
  EventBuilder,
  ModelEventHelper,
  ConditionalEventEmitter,
  EventBatch,
  EventDebugger,
  eventDebugger,
  quickEvent,
  delayedEvent,
  AssignmentEvents,
  DefenseEvents,
  CompanyEvents,
  UniversityEvents,
  SubjectEvents,
  ReportEvents,
  ProgressEvents,
  AvailabilityEvents,
  EncadreurEvents,
  UserEvents,
  EventsEvents
};

